{"ast":null,"code":"!function (globals) {\n  'use strict';\n\n  var _imports = {};\n\n  if (typeof module !== 'undefined' && module.exports) {\n    //CommonJS\n    _imports.bytesToHex = require('convert-hex').bytesToHex;\n    _imports.convertString = require('convert-string');\n    module.exports = sha256;\n  } else {\n    _imports.bytesToHex = globals.convertHex.bytesToHex;\n    _imports.convertString = globals.convertString;\n    globals.sha256 = sha256;\n  }\n  /*\n  CryptoJS v3.1.2\n  code.google.com/p/crypto-js\n  (c) 2009-2013 by Jeff Mott. All rights reserved.\n  code.google.com/p/crypto-js/wiki/License\n  */\n  // Initialization round constants tables\n\n\n  var K = []; // Compute constants\n\n  !function () {\n    function isPrime(n) {\n      var sqrtN = Math.sqrt(n);\n\n      for (var factor = 2; factor <= sqrtN; factor++) {\n        if (!(n % factor)) return false;\n      }\n\n      return true;\n    }\n\n    function getFractionalBits(n) {\n      return (n - (n | 0)) * 0x100000000 | 0;\n    }\n\n    var n = 2;\n    var nPrime = 0;\n\n    while (nPrime < 64) {\n      if (isPrime(n)) {\n        K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n        nPrime++;\n      }\n\n      n++;\n    }\n  }();\n\n  var bytesToWords = function (bytes) {\n    var words = [];\n\n    for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {\n      words[b >>> 5] |= bytes[i] << 24 - b % 32;\n    }\n\n    return words;\n  };\n\n  var wordsToBytes = function (words) {\n    var bytes = [];\n\n    for (var b = 0; b < words.length * 32; b += 8) {\n      bytes.push(words[b >>> 5] >>> 24 - b % 32 & 0xFF);\n    }\n\n    return bytes;\n  }; // Reusable object\n\n\n  var W = [];\n\n  var processBlock = function (H, M, offset) {\n    // Working variables\n    var a = H[0],\n        b = H[1],\n        c = H[2],\n        d = H[3];\n    var e = H[4],\n        f = H[5],\n        g = H[6],\n        h = H[7]; // Computation\n\n    for (var i = 0; i < 64; i++) {\n      if (i < 16) {\n        W[i] = M[offset + i] | 0;\n      } else {\n        var gamma0x = W[i - 15];\n        var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;\n        var gamma1x = W[i - 2];\n        var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;\n        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n      }\n\n      var ch = e & f ^ ~e & g;\n      var maj = a & b ^ a & c ^ b & c;\n      var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);\n      var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);\n      var t1 = h + sigma1 + ch + K[i] + W[i];\n      var t2 = sigma0 + maj;\n      h = g;\n      g = f;\n      f = e;\n      e = d + t1 | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = t1 + t2 | 0;\n    } // Intermediate hash value\n\n\n    H[0] = H[0] + a | 0;\n    H[1] = H[1] + b | 0;\n    H[2] = H[2] + c | 0;\n    H[3] = H[3] + d | 0;\n    H[4] = H[4] + e | 0;\n    H[5] = H[5] + f | 0;\n    H[6] = H[6] + g | 0;\n    H[7] = H[7] + h | 0;\n  };\n\n  function sha256(message, options) {\n    ;\n\n    if (message.constructor === String) {\n      message = _imports.convertString.UTF8.stringToBytes(message);\n    }\n\n    var H = [0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19];\n    var m = bytesToWords(message);\n    var l = message.length * 8;\n    m[l >> 5] |= 0x80 << 24 - l % 32;\n    m[(l + 64 >> 9 << 4) + 15] = l;\n\n    for (var i = 0; i < m.length; i += 16) {\n      processBlock(H, m, i);\n    }\n\n    var digestbytes = wordsToBytes(H);\n    return options && options.asBytes ? digestbytes : options && options.asString ? _imports.convertString.bytesToString(digestbytes) : _imports.bytesToHex(digestbytes);\n  }\n\n  sha256.x2 = function (message, options) {\n    return sha256(sha256(message, {\n      asBytes: true\n    }), options);\n  };\n}(this);","map":null,"metadata":{},"sourceType":"script"}